실행시간의 상한

O(n^2): 선택 정렬, 버블 정렬
O(n log n)
O(n): 선형 검색
O(log n): 이진 검색
O(1)


실행시간의 하한

Ω(n^2): 선택 정렬, 버블 정렬
Ω(n log n)
Ω(n)
Ω(log n)
Ω(1): 선형 검색, 이진 검색


여기서 버블 정렬을 조금 더 잘 할 수 있는 방법으로 바꾸는 방법을 의사코드로 나타내본다면

Repeat n-1 times 를 
Repeat until no swaps 으로 바꾸면
실행시간의 하한이 오메가 표기법이 
오메가(n^2)에서 오메가(n)이 된다.
왜냐하면 이미 다 정렬되어 있을 때 처음부터 확인을 하면 n-1번이 소모가 되는데 그곳에서 swap이 일어나지 않았다면 더이상 똑같은 걸 반복할 필요가 없기 때문이다.

그리고 강의에서 comparison sorting algorithms라는 웹사이트에 가면
각각의 알고리즘을 시각화하여 그래프로 보여주는 것을 볼 수 있다.
