첫 연결리스트는 비어있다. 비어있는 것을 나타낼때는 NULL을 쓴다.

이 리스트에 숫자를 추가해보자.
숫자 2를 추가할때,
2를 넣을 공간이 아닌, 2와 포인터를 넣을 공간을 할당한다.
node *n = malloc(sizeof(node));
이 코드는 node를 저장할 만큼 메모리 덩어리를 할당해 준다. 그리고 임시로 이것을 변수 n에 저장한다.

node의 number을 2로 설정한다.
(*n).number = 2;
*n은 가리키는 곳으로 간다는 뜻. 괄호는 연산의 순서를 위해서 넣어준 것. 그 다음에 number필드에 접근한다.
n에 있는 주소에 해당하는 메모리 덩어리로 가서 number필드에 접근해서 2로 만들어 준 것.
이것은
n->number = 2;로 표현 가능하다. syntactic sugar

2에 해당하는 새로운 node를 할당한 다음에는 
다음 node의 주소를 넣어야한다.
아직 없으므로 
n->next = NULL;

하지만 malloc을 사용할 때마다 검사를 해주어야 한다. 변환된 값이 null이 아닌지를 확인하고
if n != NULL 일때 실행하던가 ==NULL 일때 프로그램을 종료하던가 쓰임새에 맞게 넣어주면 된다.
n이 널이 아닌지 확인되기 전까지는 n을 건드리거나 화살표 기호를 사용해서는 안된디ㅏ.

이제 연결을 시켜줘야 한다.
list라는 변수가 있고 원래는 널로 초기화되어 있었지만 n은 새로운 node를 가지고 있는 임시 변수이다.
그래서 list는 이제 더이상 널이 아니다. 방금 할당한 메모리 덩어리의 주소와 같은 값을 가져야한다.
list = n;

숫자 4를 추가한다고 할때,
node *n = malloc(sizeof(node));
if (n != NULL)
{
  n->number = 4;
  n->next = NULL;
}
그 다음에 2에서 4로 연결시켜주려면
node *tmp = list;
while (tmp->next != NULL)
{
  tmp = tmp->next;
}
tmp->next = n;
내가 무엇을 가리키고 있든 next필드를 가리키라는 것이다.
널이 아니라면 계속해서 자신을 업데이트해서 그 자신이 가리키고 있는 것을 가리키도록 하는 것.

얼마나 리스트가 크든 계속해서 임시 포인터를 움직여서 널을 찾을 때까지 따라가는 것.


앞쪽과 중간에 리스트를 넣을 때 주의해야 할 점

맨 앞쪽에 1을 넣으려고 할 때 list = n; 이라고 써주면 2를 가리키는 포인터가 하나도 없으므로 2,4 등등 그 값들은 버려진다.
이것을 memory leak라고 부른다. 그렇게 되면 이 메모리에 다시는 접근할 수 없다.
그래서 먼저 1이 2를 가리키도록 한다. 중복시키는 것이다. 그 다음에 list를 1로 가리키도록 바꾸면 된다.
n->next = list;
list = n;

값을 중간에 넣는다고 할때,
node에 사용하기 위한 메모리를 할당받고 3을 넣는다고 할 때 2에서 3으로 가게 하면 안 되고
3에서 4로 가도록 한다. 그다음에 2가 3을 가리키도록 바꾼다.
( 이다음에는 루프를 이용해 원래 존재하던 리스트를 탐색하며 부등호를 사용해 삽입할 적절한 위치를 찾아내야 할 것이다.)
(그러려면 포인터를 만들고 반복문과 대소비교 그리고 포인터를 업데이트하는 과정이 필요하다.)

일반적으로는 맨 뒤에 새로운 값을 추가하는 것이 더 쉽고 그것보다는 맨 앞에 추가하는 것이 쉽다. 순서를 지키는 것이 중요하지 않은 경우
