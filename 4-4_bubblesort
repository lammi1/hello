버블 정렬에 관해서 배운다.
처음 50이 어딨는지 찾아볼때 정렬이 되어 있지 않을 때는 linear search가 더 효과적이고 
정렬이 되어있을 때는 binary search가 더 효과적이라고 했는데

그 정렬을 하는 방법에 대해서 알아보면 bubble sort가 있다.
첫번째 수부터 그 수와 그 다음 수를 비교하고 그 수가 더 크다면 swap 자리를 바꾸는 방법인데
이게 가장 큰 수부터 정렬이 된다는 점에서 bubble과 비슷하다라고 보고 bubble sort라고 부른다.
이거를 먼저 psudo code로 표현해본다면

Repeat n-1 times
  for i from 0 to n-2
    if i'th and i+1'th elements out of order
      swap them
      
  
What is the running time in Big-O notation?
  Outer loop takes (n-1)times
  Inner loop also takes (n-1)times steps - because it takes 0 to n -2
  So, multiple (n-1) and (n-1)
  it comes out n^2 -1n -1n +1
  We can represent this as O(n^2).
  
So,
O(n^2) - bubble sort
O(nlogn)
O(n) - linear search
O(logn) - binary search
O(1)

그래서 저번에 binary search 가 더 빠르다고 말했지만 binary search를 쓰려면 전제되어야 하는게 그 수들이 정렬되어 있어야 한다이므로 
Bubble sort를 사용하는데 그러면 바로 linear search를 이용하는 것과 비교했을 때 딱히 이득이 없을 수도 있고 오히려 더 느릴 수도 있다. 어느것이 더 좋다고 말할 수는 없다.
하지만 여러번 찾아야 한다고 할때 미리 정렬을 해놓고 binary search를 이용해서 나중에 더 빠른 방법을 사용할 수 있도록 만들어 놓는다면 linear search를 하는 것보다 빠를 수도 있다.
그래서 상황에 맞게 잘 써야 한다.

bubble sort를 오메가 표현법으로 나타낸다고 할 때
오메가(n^2)이다. 
왜냐하면 가장 운이 좋은 방법은 수들이 이미 잘 정렬 되어 있다는 상황인데
코드를 실행할때 이미 정렬이 되어 있을 때 quit해라라는 명령이 없으므로 
계속해서 코드를 실행시킬 것이다.
그리고 n^2번 다음에 다 실행된 뒤에 코드를 멈추게 되니까 오메가(n^2)이 된다.
